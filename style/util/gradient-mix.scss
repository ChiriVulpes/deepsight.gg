@use "sass:math";

@function gradient-mix($method, $at-percentage-or-decimal-var, $stops...) {
	$at: $at-percentage-or-decimal-var;

	@if length($stops) == 0 {
		@error "Not enough stops";
	} @else if length($stops) == 1 {
		@warn "Only one stop #{nth($stops, 1)}, why are you using gradient-mix?";
	}

	@if type-of(nth($stops, 1)) == color {
		$stops: set-nth($stops, 1, nth($stops, 1) 0%);
	}

	@if nth(nth($stops, 1), 2) != 0% {
		$new-first-stop: append((), nth(nth($stops, 1), 1) 0%);
		$stops: join($new-first-stop, $stops);
	}

	$e: length($stops);
	@if type-of(nth($stops, $e)) == color {
		$stops: set-nth($stops, $e, nth($stops, $e) 100%);
	}

	@if nth(nth($stops, $e), 2) != 100% {
		$new-last-stop: append((), nth(nth($stops, $e), 1) 100%);
		$stops: join($stops, $new-last-stop);
	}

	// @debug $stops;
	$last-position: 0;

	@for $i from 1 through length($stops) {
		$stop: nth($stops, $i);

		@if type-of($stop) !=
			list or
			length($stop) !=
			2 or
			type-of(nth($stop, 1)) !=
			color or
			type-of(nth($stop, 2)) !=
			number
		{
			@error "Invalid stop #{$stop}. Stops must be color and percentage pairs.";
		}

		@if unit(nth($stop, 2)) == "%" {
			$position: math.div(nth($stop, 2), 100%);
			@if $position < $last-position {
				@error "Invalid stop #{$stop}. Position less than previous of #{percentage($last-position)}.";
			}

			$last-position: $position;
			$stop: set-nth($stop, 2, $position);
			$stops: set-nth($stops, $i, $stop);
		}
	}

	// @debug $stops;

	$last-color: nth(nth($stops, 1), 1);
	$last-percent: nth(nth($stops, 1), 2);
	@for $i from 2 through length($stops) {
		$new-color: nth(nth($stops, $i), 1);
		$new-percent: nth(nth($stops, $i), 2);

		$last-color: color-mix(
			$method,
			$last-color,
			$new-color calc((#{$at} - #{$last-percent}) / (#{$new-percent} - #{$last-percent}) * 100%)
		);
		$last-percent: $new-percent;
	}

	@return $last-color;
}
