@mixin transition($duration, $transition-properties...) {
    $timing-function: ease-in-out;

    @if $duration == in {
        $duration: 0.1s;
        $timing-function: ease-in;
    } @else if $duration == out {
        $duration: 0.3s;
        $timing-function: ease-out;
    } @else if type-of($duration) != number {
        @error "Unknown duration value '#{$duration}'";
    }

    @if (length($transition-properties) > 0) {
        transition: all $duration $timing-function;
        transition-property: $transition-properties;
        :root:not(.focused, :hover) & {
            transition: none;
        }
    } @else {
        transition-duration: $duration;
        transition-timing-function: $timing-function;
    }
}

@mixin blur-disables-animation {
    :root:not(.focused, :hover) & {
        animation: none;
    }
}

@function str-contains-any($mainString, $substrings...) {
    @each $substring in $substrings {
        @if str-index($mainString, $substring) {
            @return true;
        }
    }
    @return false;
}

@function str-split($string, $separator) {
    // empty array/list
    $split-arr: ();
    // first index of separator in string
    $index: str-index($string, $separator);
    // loop through string
    @while $index != null {
        // get the substring from the first character to the separator
        $item: str-slice($string, 1, $index - 1);
        // push item to array
        $split-arr: append($split-arr, $item);
        // remove item and separator from string
        $string: str-slice($string, $index + 1);
        // find new index of separator
        $index: str-index($string, $separator);
    }
    // add the remaining string to list (the last item)
    $split-arr: append($split-arr, $string);

    @return $split-arr;
}

@function str-split-selector($string) {
    $selectors: ();
    $selector: "";
    $paren: 0;

    @for $i from 1 through str-length($string) {
        $char: str-slice($string, $i, $i);

        @if $char == "(" {
            $paren: $paren + 1;
            $selector: #{$selector}#{$char};
        } @else if $char == ")" {
            $paren: $paren - 1;
            $selector: #{$selector}#{$char};
            @if $paren < 0 {
                @error "Error: Unmatched closing parenthesis at position #{$i}.";
            }
        } @else if $char == "," and $paren == 0 {
            $selectors: append($selectors, $selector);
            $selector: "";
        } @else {
            $selector: #{$selector}#{$char};
        }
    }

    @if $selector != "" {
        $selectors: append($selectors, $selector);
    }

    @return $selectors;
}

@function str-starts-with($string, $substring) {
    @return str-slice($string, 1, str-length($substring)) == $substring;
}

@function str-ends-with($string, $substring) {
    @return str-slice($string, str-length($string) - str-length($substring) + 1) == $substring;
}

@function str-trim-start($str) {
    @if (str-slice($str, 1, 1) == " ") {
        @return str-trim-start(str-slice($str, 2));
    } @else {
        @return $str;
    }
}

@function str-trim-end($str) {
    @if (str-slice($str, str-length($str), -1) == " ") {
        @return str-trim-end(str-slice($str, 1, -2));
    } @else {
        @return $str;
    }
}

@function str-trim($str) {
    @return str-trim-start(str-trim-end($str));
}

$anim-id: 0;
@mixin animation($shorthand...) {
    $name: "generated-animation-#{$anim-id}";
    $anim-id: $anim-id + 1 !global;
    $shorthand: "#{$shorthand}";
    @if not str-contains-any($shorthand, linear, ease, ease-in, ease-out, ease-in-out, step-start, step-end, cubic-bezier, steps) {
        $shorthand: "linear #{$shorthand}";
    }
    
    animation: unquote($name) unquote($shorthand);
    @keyframes #{$name} {
        @content;
    }
}

@import "util/gradient-mix";
